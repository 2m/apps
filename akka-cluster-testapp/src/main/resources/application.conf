collecting-failure-detector = {
  implementation-class = "testapp.CollectorFailureDetector"

  sliding-window-size = 16

  heartbeat-interval = 1 s

  acceptable-heartbeat-pause = 10 s
}

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
  }
}

akka.actor.default-dispatcher.fork-join-executor {
  parallelism-min = 8
  parallelism-max = 8
}

akka.cluster {
  auto-down = on
  roles = ["backend", "frontend"]

  failure-detector = ${collecting-failure-detector}
  failure-detector.tag = cluster
}

akka.remote {
  log-remote-lifecycle-events = on
  transport-failure-detector = ${collecting-failure-detector}
  transport-failure-detector.tag = remoting
  watch-failure-detector = ${collecting-failure-detector}
  watch-failure-detector.tag = remote-watch
}

akka.actor.deployment {

  /statsBackend/service/workerRouter {
    router = consistent-hashing
    nr-of-instances = 100
    cluster {
      enabled = on
      max-nr-of-instances-per-node = 2
      allow-local-routees = off
      use-role = backend
    }
  }

  /factorialFrontend/producer/factorialBackendRouter = {
    router = round-robin
    nr-of-instances = 100
    cluster {
      enabled = on
      routees-path = "/user/factorialBackend"
      use-role = backend
      allow-local-routees = off
    }
  }

  /factorialBackend/workers = {
    router = round-robin
    nr-of-instances = 8
  }
}

stats.tick-interval = 5s

factorial {
  enabled = on
  batch-size=2000
  n=500
}
